@isTest
public class RunSecAPIStatusCheckTest {

    @isTest
    static void testRunSecAPIStatusCheck() {
        // Setup: Create mock data
        copado__Release__c release = new copado__Release__c(
            Name = 'Test Release',
            SecApiScanProjectCounter__c = 2,
            CurrentScanCount__c = 1,
            Current_SAST_Run_Status__c = 'STARTED',
            Current_SCA_Run_Status__c = 'STARTED'
        );
        insert release;

        SEC_API_Scan_Result__c scanResult = new SEC_API_Scan_Result__c(
            Name = 'Test Scan Result',
            Release__c = release.Id,
            Scan_Status__c = 'PENDING'
        );
        insert scanResult;

        List<copado__User_Story__c> userStories = new List<copado__User_Story__c>();
        for (Integer i = 0; i < 2; i++) {
            userStories.add(new copado__User_Story__c(
                Name = 'Test User Story ' + i,
                copado__Release__c = release.Id,
                Copado__Project__r = new Copado__Project__c(
                    Snow_AppsSvcID__c = 'TestProject' + i,
                    App_Id__c = 'AppId' + i
                )
            ));
        }
        insert userStories;

        // Mock HTTP Callout
        HttpResponse mockResponse = new HttpResponse();
        mockResponse.setStatusCode(200);
        mockResponse.setBody('{"status":"FINISHED","jsonReport":"report","pdfReport":"report.pdf","xmlReport":"report.xml","scoreCard":"A","submitedDateTime":"2025-01-01T12:00:00","message":"Scan completed successfully"}');

        Test.setMock(HttpCalloutMock.class, new MockHttpResponseGenerator(mockResponse));

        // Test Execution
        Test.startTest();
        RunSecAPIStatusCheck.scanStatusWrapper result = RunSecAPIStatusCheck.runSecAPIStatusCheck('testStatusURL', release.Id);
        Test.stopTest();

        // Assertions
        System.assertEquals('FINISHED', result.currentStatus);
        System.assertNotEquals(null, result.statusURL);
    }

    private class MockHttpResponseGenerator implements HttpCalloutMock {
        private HttpResponse response;

        public MockHttpResponseGenerator(HttpResponse response) {
            this.response = response;
        }

        public HttpResponse respond(HttpRequest req) {
            return response;
        }
    }
}
