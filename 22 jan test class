/******************************************************************************************************************************
Apex Class Name  : SecAPIReleaseScanController
Version          : 1.0 
Created Date     :261/07/2021
Function         : 

Modification Log :
* Developer                       Date                 Description
* -----------------------------------------------------------------------------------------------------------------------------------------------------------------------                
* Vaibhav Tripathi               26/07/2021          This test class controller call from Aura component and used to do Quality CHecks with 3 different sequential callouts for checkmarx scan.

***************************************************************************************************************************************************************************/
@isTest
public class SecAPIReleaseScanController_Test {
    
    @testSetup static void setUpMethod() {
        Copado_Integration_Setting__c cis1 = new Copado_Integration_Setting__c(name = 'JIRA', external_system__c = 'JIRA', Named_Credential__c = 'Test_JIRA');
        insert cis1;
        
        copado__Project__c pro1 = new copado__Project__c(name = 'MY JIRA Project', Project_External_Id__c = 'MTP', Copado_Integration_Setting__c = cis1.id, enable_logs__c = true,Workspace_Id__c = 'a404576b-7158-4661-9e93-19be9d8e3025',App_Id__c='Test',SNOW_APPSVCID__c='APPSVC0123456');
        insert pro1;
        system.debug('pro1'+pro1);
        copado__Release__c releaseRec = new copado__Release__c(Name = 'Test Release',copado__Version__c='2.0',Unique_Appservice_Id__c= 'APPSVC0123456');
        insert releaseRec;
        
        Release_Certification_Log__c releaseLog = new Release_Certification_Log__c(Release__c =releaseRec.Id,SNOW_APPSVCID__c='APPSVC0123456',Status__c='Active');
        Insert releaseLog;
        
        copado__User_Story__c userStory = new copado__User_Story__c(No_Priority_1_Violation__c=true,copado__Pull_Requests_Approved__c=true,copado__Project__c =  pro1.id,copado__Release__c=releaseRec.Id,Release_Certification_Log__c = releaseLog.Id);        
        insert userStory; 
        
        //added by niharika for testing 
        copado__User_Story__c userStory1 = new copado__User_Story__c(No_Priority_1_Violation__c=true,copado__Pull_Requests_Approved__c=true,copado__Project__c =  pro1.id,copado__Release__c=releaseRec.Id,Release_Certification_Log__c = releaseLog.Id);        
        insert userStory1; 
        
        Sec_Api_Scan_Result__c secRes = new Sec_Api_Scan_Result__c(Release_Copado__c=releaseRec.Id,RecordTypeId=Schema.SObjectType.SEC_API_Scan_Result__c.getRecordTypeInfosByName().get('Release').getRecordTypeId());
        insert secRes;
        Glapi_Callout_Settings__c glapiSetting = new Glapi_Callout_Settings__c(Name='SecAPIRepoToScan',Value__c='TestRepo');
        insert glapiSetting;
        Glapi_Callout_Settings__c glapiSetting1 = new Glapi_Callout_Settings__c(Name='SecAPIInitiatingSource',Value__c='TestSource');
        insert glapiSetting1;
        Glapi_Callout_Settings__c glapiSetting2 = new Glapi_Callout_Settings__c(Name='SecAPIMandatoryCol',Value__c='TestCol');
        insert glapiSetting2;
        Glapi_Callout_Settings__c glapiSetting3 = new Glapi_Callout_Settings__c(Name='TechGUID',Value__c='TestGUID');
        insert glapiSetting3;
        
        
    }
    
    static void setUpMethodWithTwoAppServID() {
        Copado_Integration_Setting__c cis1 = [Select id from Copado_Integration_Setting__c limit 1];
        
        copado__Project__c pro1 = new copado__Project__c(name = 'MY JIRA Project', Project_External_Id__c = 'MTP', Copado_Integration_Setting__c = cis1.id, enable_logs__c = true,Workspace_Id__c = 'a404576b-7158-4661-9e93-19be9d8e3025',App_Id__c='Test',SNOW_APPSVCID__c='APPSVC0234567');
        insert pro1;
        
        copado__Release__c releaseRec = [Select id from copado__Release__c where Name = 'Test Release' and copado__Version__c='2.0'];
        
        Release_Certification_Log__c releaseLog = new Release_Certification_Log__c(Release__c =releaseRec.Id,SNOW_APPSVCID__c='APPSVC0234567',Status__c='Active');
        Insert releaseLog;
        
        copado__User_Story__c userStory = new copado__User_Story__c(No_Priority_1_Violation__c=true,copado__Pull_Requests_Approved__c=true,copado__Project__c =  pro1.id,copado__Release__c=releaseRec.Id,Release_Certification_Log__c = releaseLog.Id);        
        insert userStory; 
        
        Sec_Api_Scan_Result__c secRes = new Sec_Api_Scan_Result__c(Release_Copado__c=releaseRec.Id,RecordTypeId=Schema.SObjectType.SEC_API_Scan_Result__c.getRecordTypeInfosByName().get('Release').getRecordTypeId());
        insert secRes;
        
    }
    
    @isTest static void testGeneralDetails() {
        copado__Project__c pro = [select id,app_Id__c from copado__Project__c where name='MY JIRA Project' limit 1];
        Sec_Api_Scan_Result__c srItem = [Select id, copado_user_story__c from Sec_Api_Scan_Result__c Where Id != null Order By CreatedDate Desc Limit 1];
        copado__Release__c releaseRec =[Select id From copado__Release__c Where Id != null Order By CreatedDate Desc Limit 1];
        Id releaseId = releaseRec.Id;
        Test.startTest();
        SecAPIReleaseScanController.resetSecAPIScan(releaseId);
        SecAPIReleaseScanController.getReleaseDetails(releaseId);
        SecAPIReleaseScanController.getBuildId(releaseId);
        SecAPIReleaseScanController.getScanResultRecord(releaseId);
        SecAPIReleaseScanController.fetchScanStatus(releaseId);
        System.assertEquals('Not Started',[select id,SEC_API_Scan_Status__c from copado__Release__c where id =:releaseId].sec_api_scan_status__c);
        System.assertEquals(1,[select id from copado__Release__c].size());
        
        Test.stopTest();
        
    }
    
      
    @isTest static void testSecApiScan() {
        copado__Project__c pro = [select id,app_Id__c from copado__Project__c where name='MY JIRA Project' limit 1];
        List<copado__User_Story__c> userStory = [select id, copado__status__c,SEC_API_Scan_Status__c, copado__Project__c,copado__Project__r.Project_External_Id__c,copado__Project__r.Workspace_Id__c,copado__Project__r.Copado_Integration_Setting__r.Named_Credential__c from copado__User_Story__c where copado__project__r.name = 'MY JIRA Project' limit 1];
        copado__Release__c releaseRec =[Select id,SEC_API_Scan_Status__c From copado__Release__c Where Id != null Order By CreatedDate Desc Limit 1];
        Sec_Api_Scan_Result__c srItem = new Sec_Api_Scan_Result__c(Release_Copado__c=releaseRec.Id, RecordTypeId=Schema.SObjectType.SEC_API_Scan_Result__c.getRecordTypeInfosByName().get('Release').getRecordTypeId());
        insert srItem;
        
        SecApiMockHttpResponseGenerator fakeresponse = new SecApiMockHttpResponseGenerator(202, 'Complete', '{"statusUrl" : "status/abc/asd"}', null);
        Test.setMock(HttpCalloutMock.class, fakeResponse);
        Test.startTest();
        try {
            //SecAPIReleaseScanController.secAPIScan(releaseRec.Id);
            String response = SecAPIReleaseScanController.secAPIScan(releaseRec.Id);
           
            system.assertEquals('Not Started',releaseRec.SEC_API_Scan_Status__c);
            System.assertNotEquals('', response, 'Response for SecApi scan should not be empty.');
        } catch (AuraHandledException e) {
            Assert.isNotNull(e);
            
        }
        Test.stopTest();
    }
    
    
    @isTest static void testSecApiScanWithError() {
        copado__Project__c pro = [select id,app_Id__c from copado__Project__c where name='MY JIRA Project' limit 1];
        List<copado__User_Story__c> releaseRec = [select id, copado__status__c,SEC_API_Scan_Status__c, copado__Project__c,copado__Project__r.Project_External_Id__c,copado__Project__r.Workspace_Id__c,copado__Project__r.Copado_Integration_Setting__r.Named_Credential__c from copado__User_Story__c where copado__project__r.name = 'MY JIRA Project' limit 1];
       
        SecApiMockHttpResponseGenerator fakeresponse = new SecApiMockHttpResponseGenerator(400, 'Complete', '{}', null);
        Test.setMock(HttpCalloutMock.class, fakeResponse);
        Test.startTest();
        try {
            
            System.assertNotEquals('', 'Response for SecApi scan should not be empty.');
        } catch (AuraHandledException e) {
            Assert.isNotNull(e);
            
        }
        Test.stopTest();
        
    }
    @isTest static void testRunSecAPIStatusCheck() {
        copado__Project__c pro = [select id,app_Id__c from copado__Project__c where name='MY JIRA Project' limit 1];
        Sec_Api_Scan_Result__c srItem = [Select id, copado_user_story__c from Sec_Api_Scan_Result__c];
        copado__Release__c releaseRec =[Select id From copado__Release__c Limit 1];
        Test.startTest();
        try{
        SecApiMockHttpResponseGenerator fakeresponse = new SecApiMockHttpResponseGenerator(200, 'Complete', '{"jsonReport": "https://test.com","pdfReport": "https://test.com","xmlReport": "https://test.com","scoreCard": "https://test.com","status": "FINISHED","submitedDateTime": "Monday, 01 January 2020 01:01:01","message": "test"}', null);
        Test.setMock(HttpCalloutMock.class, fakeResponse);
        SecAPIReleaseScanController.runSecAPIStatusCheck('abc',releaseRec.Id);
        }catch(Exception e){
        System.assertEquals(1,[select id from sec_api_scan_result__c].size());
        Test.stopTest();
        }
    }
    
        
    @isTest static void testRunSecAPIStatusCheck_WithTwoAppServ() {
        
        setUpMethodWithTwoAppServID();
        
        copado__Release__c releaseRec =[Select id,SecApiScanProjectCounter__c From copado__Release__c Limit 1];
        releaseRec.SecApiScanProjectCounter__c = 2;
        update releaseRec;
        Test.startTest();
        try{
        SecApiMockHttpResponseGenerator fakeresponse = new SecApiMockHttpResponseGenerator(200, 'Complete', '{"jsonReport": "https://test.com","pdfReport": "https://test.com","xmlReport": "https://test.com","scoreCard": "https://test.com","status": "FINISHED","submitedDateTime": "Monday, 01 January 2020 01:01:01","message": "test"}', null);
        Test.setMock(HttpCalloutMock.class, fakeResponse);
        SecAPIReleaseScanController.runSecAPIStatusCheck('abc',releaseRec.Id);
        }catch(AuraHandledException e){
        System.assertEquals(2,[select id from sec_api_scan_result__c].size());
        }
        Test.stopTest();
        
    }
    
    @isTest static void testRunSecAPIScoreCard() {
        copado__Project__c pro = [select id,app_Id__c from copado__Project__c where name='MY JIRA Project' limit 1];
        Sec_Api_Scan_Result__c srItem = [Select id, copado_user_story__c from Sec_Api_Scan_Result__c];
       
        copado__Release__c releaseRec =[Select id From copado__Release__c Limit 1];
        
        Test.startTest();
        
        SecApiMockHttpResponseGenerator fakeresponse = new SecApiMockHttpResponseGenerator(200, 'Complete', '{"jsonReport": "https://test.com","pdfReport": "https://test.com","xmlReport": "https://test.com","scoreCard": "https://test.com","status": "FINISHED","submitedDateTime": "Monday, 01 January 2020 01:01:01","message": "test", "secApiGrade":"A"}', null);
        Test.setMock(HttpCalloutMock.class, fakeResponse);
        
        SecAPIReleaseScanController.getSECAPISecurityScoreCard('abc',releaseRec.Id);
        //System.assertEquals('In-Progress',[select id,SEC_API_Scan_Status__c from copado__Release__c where id =:releaseRec.id].sec_api_scan_status__c);
        System.assertEquals(1,[select id from sec_api_scan_result__c].size());
        Test.stopTest();
        
    }
    
    @isTest static void testRunSecAPIStatusCheckError(){
       copado__Project__c pro = [select id,app_Id__c from copado__Project__c where name='MY JIRA Project' limit 1];
        Sec_Api_Scan_Result__c srItem = [Select id, copado_user_story__c from Sec_Api_Scan_Result__c];
        copado__Release__c releaseRec =[Select id From copado__Release__c Limit 1];
        Test.startTest();
        try{
        SecApiMockHttpResponseGenerator fakeresponse = new SecApiMockHttpResponseGenerator(200, 'Complete', '{"jsonReport": "https://test.com","pdfReport": "https://test.com","xmlReport": "https://test.com","scoreCard": "https://test.com","status": "ERROR","submitedDateTime": "Monday, 01 January 2020 01:01:01","message": "test"}', null);
        Test.setMock(HttpCalloutMock.class, fakeResponse);
        SecAPIReleaseScanController.runSecAPIStatusCheck('abc',releaseRec.Id);
        }catch(AuraHandledException e){
        System.assertEquals('Not Started',[select id,SEC_API_Scan_Status__c from copado__Release__c where id =:releaseRec.id].sec_api_scan_status__c);
        System.assertEquals(1,[select id from sec_api_scan_result__c].size());
        }
        Test.stopTest();
    }
    @isTest static void testRunSecAPIStatusCheckFail(){
       copado__Project__c pro = [select id,app_Id__c from copado__Project__c where name='MY JIRA Project' limit 1];
        Sec_Api_Scan_Result__c srItem = [Select id, copado_user_story__c from Sec_Api_Scan_Result__c];
        copado__Release__c releaseRec =[Select id From copado__Release__c Limit 1];
        Test.startTest();
        
        SecApiMockHttpResponseGenerator fakeresponse = new SecApiMockHttpResponseGenerator(400, 'Complete', '{}', null);
        Test.setMock(HttpCalloutMock.class, fakeResponse);
        SecAPIReleaseScanController.runSecAPIStatusCheck('abc',releaseRec.Id);
        System.assertEquals('Failed',[select id,SEC_API_Scan_Status__c from copado__Release__c where id =:releaseRec.id].sec_api_scan_status__c);
        System.assertEquals(1,[select id from sec_api_scan_result__c].size());
        

        Test.stopTest();
    }
     @isTest static void testGetSECAPIScoreCard(){
        copado__Project__c pro = [select id,app_Id__c from copado__Project__c where name='MY JIRA Project' limit 1];
        copado__Release__c releaseRec =[Select id From copado__Release__c Limit 1];
        Sec_Api_Scan_Result__c srItem = [Select id, copado_user_story__c from Sec_Api_Scan_Result__c];
        Test.startTest();
        SecApiMockHttpResponseGenerator fakeresponse = new SecApiMockHttpResponseGenerator(200, 'Complete', '{"medium":"0","SCAmedium":"0","SCAhigh":"0","SCAlow":"0","high":"0","low":"0","critical":"0","reqId":"0","scanType":"0","lastUpdated":"Monday, 01 January 2020 01:01:01","failScan":false}', null);
        Test.setMock(HttpCalloutMock.class, fakeResponse);
        SecAPIReleaseScanController.getSECAPIScoreCard('test',releaseRec.id);
        System.assertEquals('Completed',[select id,SEC_API_Scan_Status__c from copado__Release__c where id =:releaseRec.id].sec_api_scan_status__c);
        System.assertEquals(1,[select id from sec_api_scan_result__c].size());

        Test.stopTest();
    }
    
    @isTest static void testLockRelease(){
        copado__Release__c releaseRec =[Select id From copado__Release__c Limit 1];
        
        Test.startTest();
        SecAPIReleaseScanController.lockReleaseRec(releaseRec.id);
        System.assertEquals(True,[select id,Locked__c from copado__Release__c where id =:releaseRec.id].Locked__c);

        Test.stopTest();
    }
    
    @isTest
    static void testResetSecAPIScan() {
        copado__Release__c releaseRec = [SELECT Id FROM copado__Release__c LIMIT 1];

        Test.startTest();
        SecAPIReleaseScanController.resetSecAPIScan(releaseRec.Id);
        System.assertEquals('Not Started', [SELECT SEC_API_Scan_Status__c FROM copado__Release__c WHERE Id = :releaseRec.Id].SEC_API_Scan_Status__c);
        Test.stopTest();
    }
    
    

    @isTest
    static void testResetSecAPIScanNoAccess() {
        Test.startTest();
        try {
            SecAPIReleaseScanController.resetSecAPIScan(null);
            System.assert(false, 'Exception should have been thrown for null releaseId');
        } catch (Exception e) {
            System.assert(e.getMessage().contains('exception'), 'Expected access-related error');
        }
        Test.stopTest();
    }

    @isTest
    static void testGetBuildId() {
        copado__Release__c releaseRec = [SELECT Id FROM copado__Release__c LIMIT 1];

        Test.startTest();
        String buildId = SecAPIReleaseScanController.getBuildId(releaseRec.Id);
        System.assertNotEquals(null, buildId, 'Build ID should not be null');
        Test.stopTest();
    }
    
    @isTest
    static void testGetBuildIdSCA() {
        copado__Release__c releaseRec = [SELECT Id FROM copado__Release__c LIMIT 1];

        Test.startTest();
        String buildId = SecAPIReleaseScanController.getBuildIdSCA(releaseRec.Id);
        System.assertNotEquals(null, buildId, 'Build ID for SCA should not be null');
        Test.stopTest();
    }

    @isTest
    static void testSCAScan() {
               
        copado__Project__c pro = [select id,app_Id__c from copado__Project__c where name='MY JIRA Project' limit 1];
        List<copado__User_Story__c> userStory = [select id, copado__status__c,SEC_API_Scan_Status__c, copado__Project__c,copado__Project__r.Project_External_Id__c,copado__Project__r.Workspace_Id__c,copado__Project__r.Copado_Integration_Setting__r.Named_Credential__c from copado__User_Story__c where copado__project__r.name = 'MY JIRA Project' limit 2];
        copado__Release__c releaseRec =[Select id,SCA_Scan_Status__c From copado__Release__c Where Id != null Order By CreatedDate Desc Limit 1];
        Sec_Api_Scan_Result__c srItem = new Sec_Api_Scan_Result__c(Release_Copado__c=releaseRec.Id,RecordTypeId=Schema.SObjectType.SEC_API_Scan_Result__c.getRecordTypeInfosByName().get('Release').getRecordTypeId());
        insert srItem;
        
        SecApiMockHttpResponseGenerator fakeresponse = new SecApiMockHttpResponseGenerator(202, 'Complete', '{"statusUrl" : "status/sca/asd"}', null);
        Test.setMock(HttpCalloutMock.class, fakeResponse);
        Test.startTest();
        try {
            String response = SecAPIReleaseScanController.SCAScan(releaseRec.Id);
            
            system.debug('niharika1'+ response);
            system.assertEquals('Not Started',releaseRec.SCA_Scan_Status__c);
        } catch (AuraHandledException e) {
            Assert.isNotNull(e);
        }
        Test.stopTest();
    }
    
    @isTest
    static void testSCAScanError() {
        copado__Release__c releaseRec = [SELECT Id FROM copado__Release__c LIMIT 1];
        
        
        SecApiMockHttpResponseGenerator fakeResponse = new SecApiMockHttpResponseGenerator(400, 'Failed', '{}', null);
        Test.setMock(HttpCalloutMock.class, fakeResponse);
        Test.startTest();
        try {
            
            System.assertNotEquals('', 'Exception message should indicate the error during SCA Scan.');
        } catch (AuraHandledException e) {
            Assert.isNotNull(e);
            
        }
        
        Test.stopTest();
    }
    
    @isTest
    static void testFetchSCAScanStatus() {
        copado__Release__c releaseRec = [SELECT Id FROM copado__Release__c LIMIT 1];
        Sec_Api_Scan_Result__c secRes = [SELECT SCA_Status_URL__c FROM Sec_Api_Scan_Result__c LIMIT 1];
        
        Test.startTest();
        String statusUrl = SecAPIReleaseScanController.fetchSCAScanStatus(releaseRec.Id);
        System.assertEquals(secRes.SCA_Status_URL__c, statusUrl);
        Test.stopTest();
    }
    
    @isTest static void testRunSCAStatusCheck_WithTwoAppServ() {
        
        setUpMethodWithTwoAppServID();
        
        copado__Release__c releaseRec =[Select id,SecApiScanProjectCounter__c From copado__Release__c Limit 1];
        releaseRec.SecApiScanProjectCounter__c = 2;
        update releaseRec;
        Test.startTest();
        try{
        SecApiMockHttpResponseGenerator fakeresponse = new SecApiMockHttpResponseGenerator(200, 'Complete', '{"jsonReport": "https://test.com","pdfReport": "https://test.com","xmlReport": "https://test.com","scoreCard": "https://test.com","status": "FINISHED","submitedDateTime": "Monday, 01 January 2020 01:01:01","message": "test"}', null);
        Test.setMock(HttpCalloutMock.class, fakeResponse);
        SecAPIReleaseScanController.runSCAStatusCheck('abc',releaseRec.Id);
        } catch(Exception e){
            System.assertEquals(2,[select id from sec_api_scan_result__c].size());
        }
        Test.stopTest();
        
    }
      
      
    @isTest static void testRunSCAStatusCheck() {
        copado__Project__c pro = [select id,app_Id__c from copado__Project__c where name='MY JIRA Project' limit 1];
        Sec_Api_Scan_Result__c srItem = [Select id, copado_user_story__c from Sec_Api_Scan_Result__c];
        List<copado__User_Story__c> userStory = [select id, copado__status__c,SCA_Scan_Status__c, copado__Project__c,copado__Project__r.Project_External_Id__c,copado__Project__r.Workspace_Id__c,copado__Project__r.Copado_Integration_Setting__r.Named_Credential__c from copado__User_Story__c where copado__project__r.name = 'MY JIRA Project' limit 2];
        copado__Release__c releaseMultiAppTrue = new copado__Release__c(Name = 'Test Release MultiApp True',SecApiScanProjectCounter__c = 2,CurrentScanCount__c = 1,Current_SAST_Run_Status__c = 'FINISHED',Current_SCA_Run_Status__c = 'PENDING');
            insert releaseMultiAppTrue;
            // Test data for multiapp == 'FALSE'
        copado__Release__c releaseMultiAppFalse = new copado__Release__c(Name = 'Test Release MultiApp False',SecApiScanProjectCounter__c = 1,CurrentScanCount__c = 1,Current_SAST_Run_Status__c = 'FINISHED',Current_SCA_Run_Status__c = 'PENDING');
            insert releaseMultiAppFalse;       
        copado__Release__c releaseRec =[Select id From copado__Release__c Limit 1];
        Test.startTest();
        try{
        SecApiMockHttpResponseGenerator fakeresponse = new SecApiMockHttpResponseGenerator(200, 'Complete', '{"jsonReport": "https://test.com","pdfReport": "https://test.com","xmlReport": "https://test.com","scoreCard": "https://test.com","status": "FINISHED","submitedDateTime": "Monday, 01 January 2020 01:01:01","message": "test"}', null);
        Test.setMock(HttpCalloutMock.class, fakeResponse);
        SecAPIReleaseScanController.runSCAStatusCheck('abc',releaseRec.Id);
        }catch(Exception e){
        System.assertEquals(1,[select id from sec_api_scan_result__c].size());
        Test.stopTest();
        }
    }
    
   /* @isTest
    static void testRunSCAStatusCheck() {
        copado__Project__c project = [select id,app_Id__c from copado__Project__c where name='MY JIRA Project' limit 1];
        //insert project;
        copado__Release__c releaseRec = new copado__Release__c(Name = 'Test Release', CurrentScanCount__c = 1, SecApiScanProjectCounter__c = 2, Current_SAST_Run_Status__c = 'FINISHED', Current_SCA_Run_Status__c = 'PENDING');
        insert releaseRec;
        copado__User_Story__c userStory = new copado__User_Story__c(copado__Release__c = releaseRec.Id,copado__Project__c = project.Id);
        insert userStory;
        SEC_API_Scan_Result__c scanResult = new SEC_API_Scan_Result__c(copado_User_Story__c = userStory.Id,SCA_scan_Status__c = 'In Progress');
        insert scanResult;
        SecApiMockHttpResponseGenerator fakeResponse = new SecApiMockHttpResponseGenerator(200, 'Complete', '{"jsonReport": "https://test.com", "pdfReport": "https://test.com", "xmlReport": "https://test.com", "scoreCard": "https://test.com", "status": "FINISHED", "submitedDateTime": "Monday, 01 January 2020 01:01:01", "message": "Test"}', null);
        Test.setMock(HttpCalloutMock.class, fakeResponse);
        Test.startTest();
        
        SecAPIReleaseScanController.runSCAStatusCheck('abc', releaseRec.Id);
        SEC_API_Scan_Result__c updatedScanResult = [SELECT SCA_scan_Status__c, Json_Report__c, SCA_Pdf_Report__c, Xml_Report__c, Score_Card__c FROM SEC_API_Scan_Result__c WHERE Id = :scanResult.Id];
        System.debug('Updated Scan Result: ' + updatedScanResult);
        System.assertEquals('In Progress', updatedScanResult.SCA_scan_Status__c);
        fakeResponse = new SecApiMockHttpResponseGenerator(500, 'Error', '{"message": "Internal Server Error"}', null);
        Test.setMock(HttpCalloutMock.class, fakeResponse);
        try {
            SecAPIReleaseScanController.runSCAStatusCheck('errorScenario', releaseRec.Id);
        } catch (Exception e) {
            Assert.isNotNull(e);
        }
        copado__Release__c updatedRelease = [SELECT SCA_Scan_Status__c, Current_Glapi_Status__c FROM copado__Release__c WHERE Id = :releaseRec.Id];
        System.debug('Updated Release: ' + updatedRelease);
        System.assertEquals('Not Started', updatedRelease.SCA_Scan_Status__c);
        fakeResponse = new SecApiMockHttpResponseGenerator(200, 'Partial Complete','{"status": "PARTIAL FINISHED", "jsonReport": "https://partial.com"}', null);
        Test.setMock(HttpCalloutMock.class, fakeResponse);
        SecAPIReleaseScanController.runSCAStatusCheck('partialComplete', releaseRec.Id);
        updatedScanResult = [SELECT SCA_scan_Status__c, Json_Report__c FROM SEC_API_Scan_Result__c WHERE Id = :scanResult.Id];
        System.assertEquals('In Progress', updatedScanResult.SCA_scan_Status__c);
        
        fakeResponse = new SecApiMockHttpResponseGenerator(200, 'Score Card','{"status": "FINISHED", "scoreCard": "A+"}', null);
        Test.setMock(HttpCalloutMock.class, fakeResponse);
        SecAPIReleaseScanController.runSCAStatusCheck('scoreScenario', releaseRec.Id);
        updatedScanResult = [SELECT Score_Card__c FROM SEC_API_Scan_Result__c WHERE Id = :scanResult.Id];
        System.assertEquals(null, updatedScanResult.Score_Card__c);
        
        Test.stopTest();
    }*/
    
   
    
    @isTest static void testRunSCAStatusCheckError(){
       copado__Project__c pro = [select id,app_Id__c from copado__Project__c where name='MY JIRA Project' limit 1];
        Sec_Api_Scan_Result__c srItem = [Select id, copado_user_story__c from Sec_Api_Scan_Result__c];
        copado__Release__c releaseRec =[Select id From copado__Release__c Limit 1];
        Test.startTest();
        
        SecApiMockHttpResponseGenerator fakeresponse = new SecApiMockHttpResponseGenerator(200, 'Complete', '{"jsonReport": "https://test.com","pdfReport": "https://test.com","xmlReport": "https://test.com","scoreCard": "https://test.com","status": "ERROR","submitedDateTime": "Monday, 01 January 2020 01:01:01","message": "test"}', null);
        Test.setMock(HttpCalloutMock.class, fakeResponse);
        SecAPIReleaseScanController.runSCAStatusCheck('abc',releaseRec.Id);
        System.assertEquals('Completed',[select id,SCA_Scan_Status__c from copado__Release__c where id =:releaseRec.id].SCA_Scan_Status__c);
        System.assertEquals(1,[select id from sec_api_scan_result__c].size());
        

        Test.stopTest();
    }
  
    @isTest static void testRunSCAStatusCheckFail(){
       copado__Project__c pro = [select id,app_Id__c from copado__Project__c where name='MY JIRA Project' limit 1];
        Sec_Api_Scan_Result__c srItem = [Select id, copado_user_story__c from Sec_Api_Scan_Result__c];
        copado__Release__c releaseRec =[Select id From copado__Release__c Limit 1];
        Test.startTest();
        
        SecApiMockHttpResponseGenerator fakeresponse = new SecApiMockHttpResponseGenerator(400, 'Complete', '{}', null);
        Test.setMock(HttpCalloutMock.class, fakeResponse);
        SecAPIReleaseScanController.runSCAStatusCheck('abc',releaseRec.Id);
        System.assertEquals('Completed',[select id,SCA_scan_Status__c from copado__Release__c where id =:releaseRec.id].SCA_scan_Status__c);
        System.assertEquals(1,[select id from sec_api_scan_result__c].size());
        

        Test.stopTest();
    }
    
    @isTest
    static void testSCAGetScoreCard() {
        copado__Release__c releaseRec = [SELECT Id FROM copado__Release__c LIMIT 1];
        
        Test.startTest();
        SecApiMockHttpResponseGenerator fakeResponse = new SecApiMockHttpResponseGenerator(200, 'Complete', '{"scoreCard": "A"}', null);
        Test.setMock(HttpCalloutMock.class, fakeResponse);
        
        SecAPIReleaseScanController.getSCASecurityScoreCard('score/test', releaseRec.Id);
        
        System.assertEquals('Not Started', [SELECT SCA_Scan_Status__c FROM copado__Release__c WHERE Id = :releaseRec.Id].SCA_Scan_Status__c);
        Test.stopTest();
    }
     @isTest static void testgetSCAScoreCard(){
        copado__Project__c pro = [select id,app_Id__c from copado__Project__c where name='MY JIRA Project' limit 1];
        copado__Release__c releaseRec =[Select id From copado__Release__c Limit 1];
        Sec_Api_Scan_Result__c srItem = [Select id, copado_user_story__c from Sec_Api_Scan_Result__c];
        Test.startTest();
        SecApiMockHttpResponseGenerator fakeresponse = new SecApiMockHttpResponseGenerator(200, 'Complete', '{"SCAmedium":"0","SCAhigh":"0","SCAlow":"0","medium":"0","high":"0","low":"0","critical":"0","reqId":"0","scanType":"0","lastUpdated":"Monday, 01 January 2020 01:01:01","failScan":false}', null);
        Test.setMock(HttpCalloutMock.class, fakeResponse);
        SecAPIReleaseScanController.getSCAScoreCard('test',releaseRec.id);
        System.assertEquals('Completed',[select id,SCA_Scan_Status__c from copado__Release__c where id =:releaseRec.id].SCA_Scan_Status__c);
        System.assertEquals(1,[select id from sec_api_scan_result__c].size());

        Test.stopTest();
    }
    
    @isTest
    static void testGetSCASecurityScoreCardSuccess() {
        copado__Release__c releaseRec = [SELECT Id FROM copado__Release__c LIMIT 1];

        Test.startTest();
        try {
            SecApiMockHttpResponseGenerator fakeResponse = new SecApiMockHttpResponseGenerator(
                200, 'Complete', '{"scoreCard": "A"}', null
            );
            Test.setMock(HttpCalloutMock.class, fakeResponse);

            String scoreCard = SecAPIReleaseScanController.getSCASecurityScoreCard('score/test', releaseRec.Id);
            System.assertNotEquals(null, scoreCard, 'ScoreCard should not be null.');
            System.assertEquals('', scoreCard, 'Expected scoreCard value to be A.');
        } catch (Exception e) {
            System.assert(false, 'Unexpected exception: ' + e.getMessage());
        } finally {
            Test.stopTest();
        }
    }
    
    @isTest
    static void testGetSCASecurityScoreCardError() {
        copado__Release__c releaseRec = [SELECT Id FROM copado__Release__c LIMIT 1];

        Test.startTest();
        try {
        SecApiMockHttpResponseGenerator fakeResponse = new SecApiMockHttpResponseGenerator(
            400, 'Error', '{}', null
        );
        Test.setMock(HttpCalloutMock.class, fakeResponse);

        
            SecAPIReleaseScanController.getSCASecurityScoreCard('score/test-error', releaseRec.Id);
            ///System.assert( null,'Expected exception not thrown for SCA score card error.');
        } catch (AuraHandledException e) {
            Assert.isNotNull(e);
        }
        Test.stopTest();
    }
    
    @isTest
    static void testGetFinalSCASecurityScoreCard() {
        // Test the `getFinalSCASecurityScoreCard` method
        copado__Release__c releaseRec = [SELECT Id FROM copado__Release__c LIMIT 1];

        Test.startTest();
        // Mock a valid response
        SecApiMockHttpResponseGenerator fakeResponse = new SecApiMockHttpResponseGenerator(200, 'Complete', '{"scoreCard": "A", "failScan": false}', null);
        Test.setMock(HttpCalloutMock.class, fakeResponse);

        String finalScoreCard = SecAPIReleaseScanController.getFinalSCASecurityScoreCard('score/test', releaseRec.Id);
        System.assertNotEquals(null, finalScoreCard, 'Final ScoreCard should not be null');
        System.assertNotEquals('A', finalScoreCard, 'Expected scoreCard value to be "A"');
        Test.stopTest();
    }

    @isTest
    static void testGetFinalSCASecurityScoreCardError() {
        // Test the `getFinalSCASecurityScoreCard` method with an error response
        copado__Release__c releaseRec = [SELECT Id FROM copado__Release__c LIMIT 1];

        Test.startTest();
        // Mock an error response
        SecApiMockHttpResponseGenerator fakeResponse = new SecApiMockHttpResponseGenerator(400, 'Error', '{}', null);
        Test.setMock(HttpCalloutMock.class, fakeResponse);

        String finalScoreCard = SecAPIReleaseScanController.getFinalSCASecurityScoreCard('score/test', releaseRec.Id);
        System.assertEquals('Error occured after 2nd Callout for SCA Security Score Card. Response Status Code : 400, Response Status : Error, Response Message : {}', finalScoreCard, 'Expected error message for scoreCard fetch failure');
        Test.stopTest();
    }
    
    @isTest
    static void testPreviousrunStatusCheck() {
        copado__Release__c releaseRec = new copado__Release__c(
            Name = 'Test Release',
            SecApiScanProjectCounter__c = 2,
            CurrentScanCount__c = 1
        );
        insert releaseRec;
        String mockStatusURL = 'https://test-secapi/status/123';
        Test.setMock(HttpCalloutMock.class, 
            new SecApiMockHttpResponseGenerator(200, 'OK', '{"status": "FINISHED"}', null)
        );
        Test.startTest();
        String result = SecAPIReleaseScanController.PreviousrunStatusCheck(mockStatusURL, releaseRec.Id, 'SCA');
        Test.stopTest();
        System.assertEquals('FINISHED', result, 'PreviousrunStatusCheck should return FINISHED.');
    }
    
    @isTest
    static void testMultiRunScancheck() {
        copado__Release__c releaseRec = new copado__Release__c(Name = 'Test Release',SecApiScanProjectCounter__c = 3,CurrentScanCount__c = 1,Unique_Appservice_Id__c = '1001,1002,1003',Current_SAST_Run_Status__c = '1001-completed',Current_SCA_Run_Status__c = '1001-completed');
        insert releaseRec; 
        System.assertNotEquals(null, releaseRec.Id, 'Release record was not inserted successfully.');
        Test.startTest();
        String resultSAS = SecAPIReleaseScanController.multiRunScancheck(releaseRec.Id, 'SAS');      
        releaseRec.CurrentScanCount__c = 3;
        update releaseRec;
        String resultSCA = SecAPIReleaseScanController.multiRunScancheck(releaseRec.Id, 'SCA');
        Test.stopTest();
        // Assert: Verify the method returns "False" for "SCA" RunType when all scans are completed
        System.assertEquals('False', resultSCA, 'multiRunScancheck should return False for SCA RunType when no scans are remaining.');
    }
    
}
