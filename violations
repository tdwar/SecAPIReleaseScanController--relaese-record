@future
    public static void listtoupdate(String RelId ,Integer Runcnt,String curstat){
    List<copado__Release__c> toUpdateReleases = new List<copado__Release__c>();
    toUpdateReleases.add(new copado__Release__c(Id=Id.valueof(RelId),CurrentScanCount__c =Runcnt,Current_SAST_Run_Status__c=curstat ));
    update  toUpdateReleases;   
        
    }
    @AuraEnabled
    //VXD3378 CHANGES START 01/14/2025
    //public static String getSCAvalue(String releaseId) {
    public static boolean getSCAvalue(String releaseId, Integer count) {
    //VXD3378 CHANGES END 01/14/2025
        system.debug('Test-0001'); // B2B
        // Check access to copado__Release__c object and its fields
        if (!Schema.sObjectType.copado__Release__c.isAccessible() || 
            !Schema.sObjectType.copado__Release__c.fields.Humana_Org__c.isAccessible()) {
                throw new AuraHandledException('User does not have access to required fields or object.');
            }
		system.debug('VXD3378 TESTING - releaseRecord-' +releaseId); // B2B
        copado__Release__c releaseRecord = [SELECT Humana_Org__c FROM copado__Release__c WHERE Id = :releaseId  WITH SECURITY_ENFORCED LIMIT 1 ];
         
        if (String.isBlank(releaseRecord.Humana_Org__c)) {
            throw new AuraHandledException('Humana_Org__c is blank for the given release.');
        }
        
      /*  if (!Schema.sObjectType.SCA_Identifier_for_ORG__mdt.isAccessible() || 
            !Schema.sObjectType.SCA_Identifier_for_ORG__mdt.fields.OrgName__c.isAccessible() || 
            !Schema.sObjectType.SCA_Identifier_for_ORG__mdt.fields.SCA_required__c.isAccessible()) {
                throw new AuraHandledException('User does not have access to required metadata fields or object.');
            }*/
        //VXD3378 changes start 01/14/2025 
        system.debug('VXD3378 TESTING - getSCAvalue'); // B2B
        /*
        List <SCA_Identifier_for_ORG__mdt> SCAdataRecords = new List <SCA_Identifier_for_ORG__mdt>();
        String Sca_Required = 'FALSE';
        SCAdataRecords = [SELECT OrgName__c, SCA_required__c FROM SCA_Identifier_for_ORG__mdt WHERE SCA_required__c = 'TRUE' AND OrgName__c = :releaseRecord.Humana_Org__c];
        
        if(SCAdataRecords.size() > 0){
            Sca_Required = 'TRUE';
            system.debug('ORG name: ' + SCAdataRecords[0].OrgName__c); // B2B
            system.debug('SCA required value for ORG: ' + SCAdataRecords[0].SCA_required__c); // TRUE
        }
        else{
            Sca_Required = 'FALSE';
        }
        Sca_Required = 'TRUE';
        */
        copado__Release__c rl = new copado__Release__c();
        List <copado__Release__c> toUpdateReleases = NEW List<copado__Release__c>();
        SCA_Identifier_for_ORG__mdt mdtRecord = [SELECT OrgName__c, SCA_required__c FROM SCA_Identifier_for_ORG__mdt WHERE OrgName__c = :releaseRecord.Humana_Org__c LIMIT 1];
        system.debug('value of sca - getscavalue method'+ mdtRecord.SCA_required__c);
        Boolean Sca_Required = Boolean.valueOf(mdtRecord.SCA_required__c);
        if (Sca_Required == false){
            if(count == 1){
            system.debug('VXD3378 false of sca method');
            rl = new copado__Release__c(Id=releaseId,SCA_Scan_Status__c='Not Applicable');
			toUpdateReleases.add(rl);
            if(!toUpdateReleases.isEmpty() && Schema.sObjectType.copado__Release__c.isUpdateable()){
                update toUpdateReleases;
            }}
        }
            
        system.debug('value of sca boolean'+ Sca_Required);
        //VXD3378 changes end 01/14/2025
        return Sca_Required;
    }
sr.Id = recordId;
                sr.SCA_scan_Status__c = 'Callout 1 Failed';
                if (!Schema.sObjectType.SEC_API_Scan_Result__c.fields.SCA_Error_Message__c.isUpdateable()) {
                    throw new AuraHandledException('User does not have appropriate access to SCA_Error_Message__c field.');
                }
                sr.SCA_Error_Message__c = 'Status Code '+SCAres.getStatusCode() +', Error Message '+SCAres.getBody();
                if (!Schema.sObjectType.copado__Release__c.fields.SCA_Scan_Status__c.isUpdateable() ||
                    !Schema.sObjectType.copado__Release__c.fields.SecApiScanProjectCounter__c.isUpdateable()) {
                        throw new AuraHandledException('User does not have appropriate access to update copado__Release__c fields.');
                    }
                //toUpdateRelease.add(new copado__Release__c(Id=releaseId,SCA_Scan_Status__c='Completed',SecApiScanProjectCounter__c = scanCounter));  
               // resp = 'Error occured during 1st Callout. Response Status Code : ' +SCAres.getStatusCode()+ ', Response Status : ' + SCAres.getStatus()+', Response Message : ' + SCAres.getBody();
            }
            if(!toUpdateRelease.isEmpty() && Schema.sObjectType.copado__Release__c.isUpdateable()){
                System.debug('*******************************-update 8');
                update toUpdateRelease;
            }
            List<SEC_API_Scan_Result__c> lstSecScanResults =  new List<SEC_API_Scan_Result__c>{sr};
                if(!lstSecScanResults.isEmpty() && Schema.sObjectType.SEC_API_Scan_Result__c.isUpdateable() && Schema.sObjectType.SEC_API_Scan_Result__c.isAccessible()){
                    Update lstSecScanResults;
                }
            }
        }catch(Exception e){
            system.debug('exception '+e +e.getCause()+e.getLineNumber()+e.getMessage());
            throw new AuraHandledException('Error occured during 1st Callout. Exception Cause : ' +e.getCause()+ ' at Line No. ' + e.getLineNumber()+' Error Message : ' + e.getMessage());
        } 
        return resp;
    }

FLS_Update
Description: The application attempts to access an object in @DestinationElement in @DestinationFile at line
@DestinationLine without checking if a user is authorized to do so. The object is updated with the data
provided at @SourceElement in @SourceFile at line @SourceLine.
Query Path: Apex/Apex_Force_com_Serious_Security_Risk/FLS_Update
Total Flows: 1
RECURRENT
State: To Verify
Status: RECURRENT
Group name: Apex_Force_com_Serious_Security_Risk
First scan id: c250739b-883c-40b1-b9a5-c5c942b8e3ba
Found date: 2025-01-23 09:48:23 +0000 UTC
First found date: 2024-12-19 13:28:08 +0000 UTC
Source element: id
Source file: /classes/SecAPIReleaseScanController.cls
Source method: scascan
Source line: 635
Destination element: lstsecscanresults
Destination file: /classes/SecAPIReleaseScanController.cls
Destination method: scascan
Destination line: 654
Compliances: SANS top 25, CWE top 25, OWASP ASVS, OWASP Top 10 2021, Top Tier, PCI DSS v4.0, PCI
DSS v3.2.1, ASA Premium, MOIS(KISA) Secure Coding 2021
CWE: CWE-285


