   
  
    @isTest static void testSecApiScan() {
        copado__Project__c pro = [select id,app_Id__c from copado__Project__c where name='MY JIRA Project' limit 1];
        List<copado__User_Story__c> userStory = [select id, copado__status__c,SEC_API_Scan_Status__c, copado__Project__c,copado__Project__r.Project_External_Id__c,copado__Project__r.Workspace_Id__c,copado__Project__r.Copado_Integration_Setting__r.Named_Credential__c from copado__User_Story__c where copado__project__r.name = 'MY JIRA Project' limit 1];
        copado__Release__c releaseRec =[Select id From copado__Release__c Where Id != null Order By CreatedDate Desc Limit 1];
        Sec_Api_Scan_Result__c srItem = new Sec_Api_Scan_Result__c(Release_Copado__c=releaseRec.Id,RecordTypeId=Schema.SObjectType.SEC_API_Scan_Result__c.getRecordTypeInfosByName().get('Release').getRecordTypeId());
        insert srItem;
        
        SecApiMockHttpResponseGenerator fakeresponse = new SecApiMockHttpResponseGenerator(202, 'Complete', '{"statusUrl" : "status/abc/asd"}', null);
        Test.setMock(HttpCalloutMock.class, fakeResponse);
        Test.startTest();
        try {
            //SecAPIReleaseScanController.secAPIScan(releaseRec.Id);
            String response = SecAPIReleaseScanController.secAPIScan(releaseRec.Id);
           
            system.assertEquals('Not Started',releaseRec.SEC_API_Scan_Status__c);
            System.assertNotEquals('', 'Response for SecApi scan should not be empty.');
        } catch (AuraHandledException e) {
            Assert.isNotNull(e);
            
        }
        Test.stopTest();
    }


System.SObjectException: SObject row was retrieved via SOQL without querying the requested field: copado__Release__c.SEC_API_Scan_Status__c
Class.SecAPIReleaseScanController_Test.testSecApiScan: line 102, column 1


@isTest
static void testSecApiScan() {
    // Setup: Create necessary data
    copado__Project__c pro = [SELECT Id, app_Id__c FROM copado__Project__c WHERE Name = 'MY JIRA Project' LIMIT 1];
    List<copado__User_Story__c> userStory = [
        SELECT Id, copado__status__c, SEC_API_Scan_Status__c, copado__Project__c,
               copado__Project__r.Project_External_Id__c, copado__Project__r.Workspace_Id__c,
               copado__Project__r.Copado_Integration_Setting__r.Named_Credential__c
        FROM copado__User_Story__c
        WHERE copado__project__r.Name = 'MY JIRA Project'
        LIMIT 1
    ];
    copado__Release__c releaseRec = [
        SELECT Id, SEC_API_Scan_Status__c 
        FROM copado__Release__c 
        WHERE Id != null 
        ORDER BY CreatedDate DESC 
        LIMIT 1
    ];
    Sec_Api_Scan_Result__c srItem = new Sec_Api_Scan_Result__c(
        Release_Copado__c = releaseRec.Id,
        RecordTypeId = Schema.SObjectType.SEC_API_Scan_Result__c.getRecordTypeInfosByName().get('Release').getRecordTypeId()
    );
    insert srItem;

    // Mock the HTTP response
    SecApiMockHttpResponseGenerator fakeResponse = new SecApiMockHttpResponseGenerator(202, 'Complete', '{"statusUrl" : "status/abc/asd"}', null);
    Test.setMock(HttpCalloutMock.class, fakeResponse);

    // Test: Trigger the secAPIScan method
    Test.startTest();
    try {
        String response = SecAPIReleaseScanController.secAPIScan(releaseRec.Id);

        // Validate response and release record status
        System.assertNotEquals('', response, 'Response for SecAPI scan should not be empty.');
        System.assertEquals('Not Started', releaseRec.SEC_API_Scan_Status__c);

        // Additional assertions for untested paths (based on line numbers provided)
        System.assertNotEquals(null, srItem.Release_Copado__c, 'Release_Copado__c should be set.');
        System.assertEquals('Complete', fakeResponse.getBody(), 'Mock response body should match.');
    } catch (AuraHandledException e) {
        System.assertNotEquals(null, e, 'Exception should be handled properly.');
    }
    Test.stopTest();

    // Simulate edge cases (e.g., missing named credentials or invalid release ID)
    Test.startTest();
    try {
        SecAPIReleaseScanController.secAPIScan(null); // Passing null release ID to test error handling
    } catch (AuraHandledException e) {
        System.assertNotEquals(null, e, 'AuraHandledException should be triggered for invalid input.');
    }
    Test.stopTest();
}

@isTest
public class SecAPIReleaseScanController_Test {
    @isTest
    static void testPreviousrunStatusCheck() {
        // Mock data setup
        String mockReleaseId = 'a0B5w00000ABC123';
        String mockStatusURL = 'https://test-secapi/status/123';
        String scanType = 'SCA';

        // Mock HTTP callout response
        Test.startTest();
        Test.setMock(HttpCalloutMock.class, new SecApiMockHttpResponseGenerator(200, 'Complete', '{"status": "FINISHED"}', null));
        
        // Test the PreviousrunStatusCheck method
        String result = SecAPIReleaseScanController.PreviousrunStatusCheck(mockStatusURL, mockReleaseId, scanType);
        
        // Assert the expected result
        System.assertEquals('FINISHED', result, 'PreviousrunStatusCheck should return FINISHED.');
        Test.stopTest();
    }

    @isTest
    static void testMultiRunscancheck() {
        // Mock data setup
        String mockReleaseId = 'a0B5w00000ABC123';
        String scanType = 'SCA';

        // Insert a mock release record
        copado__Release__c releaseRec = new copado__Release__c(
            Id = mockReleaseId,
            SecApiScanProjectCounter__c = 3,
            CurrentScanCount__c = 2
        );
        insert releaseRec;

        // Test the multiRunscancheck method
        String result = SecAPIReleaseScanController.multiRunscancheck(mockReleaseId, scanType);
        
        // Assert the expected result
        System.assertEquals('TRUE', result, 'multiRunscancheck should return TRUE when there are remaining scans.');
        
        // Modify release to simulate completed scans
        releaseRec.CurrentScanCount__c = 3;
        update releaseRec;

        result = SecAPIReleaseScanController.multiRunscancheck(mockReleaseId, scanType);
        
        // Assert the expected result
        System.assertEquals('FALSE', result, 'multiRunscancheck should return FALSE when all scans are completed.');
    }
}

@isTest
public class SecAPIReleaseScanController_Test {
    @isTest
    static void testPreviousrunStatusCheck() {
        // Setup: Insert mock release record
        copado__Release__c releaseRec = new copado__Release__c(
            Name = 'Test Release',
            SecApiScanProjectCounter__c = 2,
            CurrentScanCount__c = 1
        );
        insert releaseRec;

        // Setup: Mock HTTP response for PreviousrunStatusCheck
        String mockStatusURL = 'https://test-secapi/status/123';
        Test.setMock(HttpCalloutMock.class, 
            new SecApiMockHttpResponseGenerator(200, 'OK', '{"status": "FINISHED"}', null)
        );

        // Test: Call the PreviousrunStatusCheck method
        Test.startTest();
        String result = SecAPIReleaseScanController.PreviousrunStatusCheck(mockStatusURL, releaseRec.Id, 'SCA');
        Test.stopTest();

        // Assert: Verify the method returns the correct status
        System.assertEquals('FINISHED', result, 'PreviousrunStatusCheck should return FINISHED.');
    }

    @isTest
    static void testMultiRunscancheck() {
        // Setup: Insert mock release record
        copado__Release__c releaseRec = new copado__Release__c(
            Name = 'Test Release',
            SecApiScanProjectCounter__c = 3,
            CurrentScanCount__c = 2
        );
        insert releaseRec;

        // Test: Call the multiRunscancheck method
        Test.startTest();
        String result = SecAPIReleaseScanController.multiRunscancheck(releaseRec.Id, 'SCA');
        Test.stopTest();

        // Assert: Verify the method returns "TRUE" when there are remaining scans
        System.assertEquals('TRUE', result, 'multiRunscancheck should return TRUE when scans are remaining.');

        // Update: Simulate a scenario where all scans are completed
        releaseRec.CurrentScanCount__c = 3;
        update releaseRec;

        // Test: Call the multiRunscancheck method again
        Test.startTest();
        result = SecAPIReleaseScanController.multiRunscancheck(releaseRec.Id, 'SCA');
        Test.stopTest();

        // Assert: Verify the method returns "FALSE" when all scans are completed
        System.assertEquals('FALSE', result, 'multiRunscancheck should return FALSE when all scans are completed.');
    }
}

@isTest
static void testMultiRunscancheck() {
    // Setup: Create and insert a mock release record
    copado__Release__c releaseRec = new copado__Release__c(
        Name = 'Test Release',
        SecApiScanProjectCounter__c = 3, // Total number of scans expected
        CurrentScanCount__c = 2         // Current scan count
    );
    insert releaseRec;

    // Ensure that related user stories exist, if required by multiRunscancheck
    List<copado__User_Story__c> userStories = new List<copado__User_Story__c>();
    for (Integer i = 0; i < 2; i++) {
        userStories.add(new copado__User_Story__c(
            Name = 'Test User Story ' + i,
            copado__Release__c = releaseRec.Id,
            copado__Project__c = null // Update if the method requires project data
        ));
    }
    insert userStories;

    // Test: Call the multiRunscancheck method with valid data
    Test.startTest();
    String result = SecAPIReleaseScanController.multiRunscancheck(releaseRec.Id, 'SCA');
    Test.stopTest();

    // Assert: Verify the method returns "TRUE" when scans are remaining
    System.assertEquals('TRUE', result, 'multiRunscancheck should return TRUE when scans are remaining.');

    // Update: Simulate a scenario where all scans are completed
    releaseRec.CurrentScanCount__c = 3; // Match SecApiScanProjectCounter__c to indicate no remaining scans
    update releaseRec;

    // Test: Call the multiRunscancheck method again
    Test.startTest();
    result = SecAPIReleaseScanController.multiRunscancheck(releaseRec.Id, 'SCA');
    Test.stopTest();

    // Assert: Verify the method returns "FALSE" when all scans are completed
    System.assertEquals('FALSE', result, 'multiRunscancheck should return FALSE when all scans are completed.');
}


@isTest
static void testMultiRunscancheck() {
    // Step 1: Create and insert a mock release record with required fields
    copado__Release__c releaseRec = new copado__Release__c(
        Name = 'Test Release',
        SecApiScanProjectCounter__c = 3, // Total number of scans expected
        CurrentScanCount__c = 2         // Current scan count
    );
    insert releaseRec;

    // Step 2: Test the case where scans are still remaining
    Test.startTest();
    String result = SecAPIReleaseScanController.multiRunscancheck(releaseRec.Id, 'SCA');
    Test.stopTest();

    // Assert: Verify that the method returns "TRUE"
    System.assertEquals('TRUE', result, 'multiRunscancheck should return TRUE when scans are remaining.');

    // Step 3: Simulate all scans completed by updating the release record
    releaseRec.CurrentScanCount__c = 3; // Match SecApiScanProjectCounter__c
    update releaseRec;

    // Step 4: Test the case where no scans are remaining
    Test.startTest();
    result = SecAPIReleaseScanController.multiRunscancheck(releaseRec.Id, 'SCA');
    Test.stopTest();

    // Assert: Verify that the method returns "FALSE"
    System.assertEquals('FALSE', result, 'multiRunscancheck should return FALSE when no scans are remaining.');
}

@isTest
static void testMultiRunscancheck() {
    // Step 1: Create and insert a mock release record with required fields
    copado__Release__c releaseRec = new copado__Release__c(
        Name = 'Test Release',
        SecApiScanProjectCounter__c = 3, // Total number of scans expected
        CurrentScanCount__c = 2         // Current scan count
    );
    insert releaseRec;

    // Step 2: Test the case where scans are still remaining
    Test.startTest();
    String result = SecAPIReleaseScanController.multiRunscancheck(releaseRec.Id, 'SCA');
    Test.stopTest();

    // Assert: Verify that the method returns "TRUE"
    System.assertEquals('TRUE', result, 'multiRunscancheck should return TRUE when scans are remaining.');

    // Step 3: Simulate all scans completed by updating the release record
    releaseRec.CurrentScanCount__c = 3; // Match SecApiScanProjectCounter__c
    update releaseRec;

    // Step 4: Test the case where no scans are remaining
    Test.startTest();
    result = SecAPIReleaseScanController.multiRunscancheck(releaseRec.Id, 'SCA');
    Test.stopTest();

    // Assert: Verify that the method returns "FALSE"
    System.assertEquals('FALSE', result, 'multiRunscancheck should return FALSE when no scans are remaining.');
}
