/******************************************************************************************************************************
Apex Class Name  : SecAPIReleaseScanController
Version          : 1.0 
Created Date     :261/07/2021
Function         : 

Modification Log :
* Developer                       Date                 Description
* -----------------------------------------------------------------------------------------------------------------------------------------------------------------------                
* Vaibhav Tripathi               26/07/2021          This test class controller call from Aura component and used to do Quality CHecks with 3 different sequential callouts for checkmarx scan.

***************************************************************************************************************************************************************************/
@isTest
public class SecAPIReleaseScanController_Test {
    
    @testSetup static void setUpMethod() {
        Copado_Integration_Setting__c cis1 = new Copado_Integration_Setting__c(name = 'JIRA', external_system__c = 'JIRA', Named_Credential__c = 'Test_JIRA');
        insert cis1;
        
        copado__Project__c pro1 = new copado__Project__c(name = 'MY JIRA Project', Project_External_Id__c = 'MTP', Copado_Integration_Setting__c = cis1.id, enable_logs__c = true,Workspace_Id__c = 'a404576b-7158-4661-9e93-19be9d8e3025',App_Id__c='Test',SNOW_APPSVCID__c='APPSVC0123456');
        insert pro1;
        system.debug('pro1'+pro1);
        copado__Release__c releaseRec = new copado__Release__c(Name = 'Test Release',copado__Version__c='2.0');
        insert releaseRec;
        
        Release_Certification_Log__c releaseLog = new Release_Certification_Log__c(Release__c =releaseRec.Id,SNOW_APPSVCID__c='APPSVC0123456',Status__c='Active');
        Insert releaseLog;
        
        copado__User_Story__c userStory = new copado__User_Story__c(No_Priority_1_Violation__c=true,copado__Pull_Requests_Approved__c=true,copado__Project__c =  pro1.id,copado__Release__c=releaseRec.Id,Release_Certification_Log__c = releaseLog.Id);        
        insert userStory; 
        
        Sec_Api_Scan_Result__c secRes = new Sec_Api_Scan_Result__c(Release_Copado__c=releaseRec.Id,RecordTypeId=Schema.SObjectType.SEC_API_Scan_Result__c.getRecordTypeInfosByName().get('Release').getRecordTypeId());
        insert secRes;
        Glapi_Callout_Settings__c glapiSetting = new Glapi_Callout_Settings__c(Name='SecAPIRepoToScan',Value__c='TestRepo');
        insert glapiSetting;
        Glapi_Callout_Settings__c glapiSetting1 = new Glapi_Callout_Settings__c(Name='SecAPIInitiatingSource',Value__c='TestSource');
        insert glapiSetting1;
        Glapi_Callout_Settings__c glapiSetting2 = new Glapi_Callout_Settings__c(Name='SecAPIMandatoryCol',Value__c='TestCol');
        insert glapiSetting2;
        Glapi_Callout_Settings__c glapiSetting3 = new Glapi_Callout_Settings__c(Name='TechGUID',Value__c='TestGUID');
        insert glapiSetting3;
        
        
    }
    
    static void setUpMethodWithTwoAppServID() {
        Copado_Integration_Setting__c cis1 = [Select id from Copado_Integration_Setting__c limit 1];
        
        copado__Project__c pro1 = new copado__Project__c(name = 'MY JIRA Project', Project_External_Id__c = 'MTP', Copado_Integration_Setting__c = cis1.id, enable_logs__c = true,Workspace_Id__c = 'a404576b-7158-4661-9e93-19be9d8e3025',App_Id__c='Test',SNOW_APPSVCID__c='APPSVC0234567');
        insert pro1;
        
        copado__Release__c releaseRec = [Select id from copado__Release__c where Name = 'Test Release' and copado__Version__c='2.0'];
        
        Release_Certification_Log__c releaseLog = new Release_Certification_Log__c(Release__c =releaseRec.Id,SNOW_APPSVCID__c='APPSVC0234567',Status__c='Active');
        Insert releaseLog;
        
        copado__User_Story__c userStory = new copado__User_Story__c(No_Priority_1_Violation__c=true,copado__Pull_Requests_Approved__c=true,copado__Project__c =  pro1.id,copado__Release__c=releaseRec.Id,Release_Certification_Log__c = releaseLog.Id);        
        insert userStory; 
        
        Sec_Api_Scan_Result__c secRes = new Sec_Api_Scan_Result__c(Release_Copado__c=releaseRec.Id,RecordTypeId=Schema.SObjectType.SEC_API_Scan_Result__c.getRecordTypeInfosByName().get('Release').getRecordTypeId());
        insert secRes;
        
    }
    
    @isTest static void testGeneralDetails() {
        copado__Project__c pro = [select id,app_Id__c from copado__Project__c where name='MY JIRA Project' limit 1];
        Sec_Api_Scan_Result__c srItem = [Select id, copado_user_story__c from Sec_Api_Scan_Result__c Where Id != null Order By CreatedDate Desc Limit 1];
        copado__Release__c releaseRec =[Select id From copado__Release__c Where Id != null Order By CreatedDate Desc Limit 1];
        Id releaseId = releaseRec.Id;
        Test.startTest();
        SecAPIReleaseScanController.resetSecAPIScan(releaseId);
        SecAPIReleaseScanController.getReleaseDetails(releaseId);
        SecAPIReleaseScanController.getBuildId(releaseId);
        SecAPIReleaseScanController.getScanResultRecord(releaseId);
        SecAPIReleaseScanController.fetchScanStatus(releaseId);
        System.assertEquals('Not Started',[select id,SEC_API_Scan_Status__c from copado__Release__c where id =:releaseId].sec_api_scan_status__c);
        System.assertEquals(1,[select id from copado__Release__c].size());
        
        Test.stopTest();
        
    }
    
     @isTest static void testSecApiScan() {
        copado__Project__c pro = [select id,app_Id__c from copado__Project__c where name='MY JIRA Project' limit 1];
         system.debug('@@@' + pro);
        Sec_Api_Scan_Result__c srItem = [Select id, copado_user_story__c from Sec_Api_Scan_Result__c];
        copado__Release__c releaseRec =[Select id From copado__Release__c Limit 1];      
         Test.startTest();
        
        SecApiMockHttpResponseGenerator fakeresponse = new SecApiMockHttpResponseGenerator(202, 'Complete', '{"statusUrl" : "status/abc/asdasd"}', null);
        Test.setMock(HttpCalloutMock.class, fakeResponse);
        
        SecAPIReleaseScanController.secApiScan(releaseRec.id);
        System.assertEquals('In-Progress',[select id,SEC_API_Scan_Status__c from copado__Release__c where id =:releaseRec.id].sec_api_scan_status__c);
        System.assertEquals(1,[select id from sec_api_scan_result__c].size());
        Test.stopTest();
        
    }
    @isTest static void testSecApiScanWithError() {
        copado__Project__c pro = [select id,app_Id__c from copado__Project__c where name='MY JIRA Project' limit 1];
        Sec_Api_Scan_Result__c srItem = [Select id, copado_user_story__c from Sec_Api_Scan_Result__c];
        copado__Release__c releaseRec =[Select id From copado__Release__c Limit 1];        Test.startTest();
        
        SecApiMockHttpResponseGenerator fakeresponse = new SecApiMockHttpResponseGenerator(400, 'Complete', '{}', null);
        Test.setMock(HttpCalloutMock.class, fakeResponse);
        
        SecAPIReleaseScanController.secApiScan(releaseRec.id);
        System.assertEquals('Completed',[select id,SEC_API_Scan_Status__c from copado__Release__c where id =:releaseRec.id].sec_api_scan_status__c);
        System.assertEquals(1,[select id from sec_api_scan_result__c].size());
        Test.stopTest();
        
    }
    @isTest static void testRunSecAPIStatusCheck() {
        copado__Project__c pro = [select id,app_Id__c from copado__Project__c where name='MY JIRA Project' limit 1];
        Sec_Api_Scan_Result__c srItem = [Select id, copado_user_story__c from Sec_Api_Scan_Result__c];
        copado__Release__c releaseRec =[Select id From copado__Release__c Limit 1];
        Test.startTest();
        
        SecApiMockHttpResponseGenerator fakeresponse = new SecApiMockHttpResponseGenerator(200, 'Complete', '{"jsonReport": "https://test.com","pdfReport": "https://test.com","xmlReport": "https://test.com","scoreCard": "https://test.com","status": "FINISHED","submitedDateTime": "Monday, 01 January 2020 01:01:01","message": "test"}', null);
        Test.setMock(HttpCalloutMock.class, fakeResponse);
        
        SecAPIReleaseScanController.runSecAPIStatusCheck('abc',releaseRec.Id);
        //System.assertEquals('In-Progress',[select id,SEC_API_Scan_Status__c from copado__Release__c where id =:releaseRec.id].sec_api_scan_status__c);
        System.assertEquals(1,[select id from sec_api_scan_result__c].size());
        Test.stopTest();
        
    }
    
    @isTest static void testRunSecAPIStatusCheck_WithTwoAppServ() {
        
        setUpMethodWithTwoAppServID();
        
        copado__Release__c releaseRec =[Select id,SecApiScanProjectCounter__c From copado__Release__c Limit 1];
        releaseRec.SecApiScanProjectCounter__c = 2;
        update releaseRec;
        Test.startTest();
        
        SecApiMockHttpResponseGenerator fakeresponse = new SecApiMockHttpResponseGenerator(200, 'Complete', '{"jsonReport": "https://test.com","pdfReport": "https://test.com","xmlReport": "https://test.com","scoreCard": "https://test.com","status": "FINISHED","submitedDateTime": "Monday, 01 January 2020 01:01:01","message": "test"}', null);
        Test.setMock(HttpCalloutMock.class, fakeResponse);
        
        SecAPIReleaseScanController.runSecAPIStatusCheck('abc',releaseRec.Id);
        System.assertEquals(2,[select id from sec_api_scan_result__c].size());
        Test.stopTest();
        
    }
    
    @isTest static void testRunSecAPIScoreCard() {
        copado__Project__c pro = [select id,app_Id__c from copado__Project__c where name='MY JIRA Project' limit 1];
        Sec_Api_Scan_Result__c srItem = [Select id, copado_user_story__c from Sec_Api_Scan_Result__c];
       
        copado__Release__c releaseRec =[Select id From copado__Release__c Limit 1];
        
        Test.startTest();
        
        SecApiMockHttpResponseGenerator fakeresponse = new SecApiMockHttpResponseGenerator(200, 'Complete', '{"jsonReport": "https://test.com","pdfReport": "https://test.com","xmlReport": "https://test.com","scoreCard": "https://test.com","status": "FINISHED","submitedDateTime": "Monday, 01 January 2020 01:01:01","message": "test", "secApiGrade":"A"}', null);
        Test.setMock(HttpCalloutMock.class, fakeResponse);
        
        SecAPIReleaseScanController.getSECAPISecurityScoreCard('abc',releaseRec.Id);
        //System.assertEquals('In-Progress',[select id,SEC_API_Scan_Status__c from copado__Release__c where id =:releaseRec.id].sec_api_scan_status__c);
        System.assertEquals(1,[select id from sec_api_scan_result__c].size());
        Test.stopTest();
        
    }
    
    @isTest static void testRunSecAPIStatusCheckError(){
       copado__Project__c pro = [select id,app_Id__c from copado__Project__c where name='MY JIRA Project' limit 1];
        Sec_Api_Scan_Result__c srItem = [Select id, copado_user_story__c from Sec_Api_Scan_Result__c];
        copado__Release__c releaseRec =[Select id From copado__Release__c Limit 1];
        Test.startTest();
        
        SecApiMockHttpResponseGenerator fakeresponse = new SecApiMockHttpResponseGenerator(200, 'Complete', '{"jsonReport": "https://test.com","pdfReport": "https://test.com","xmlReport": "https://test.com","scoreCard": "https://test.com","status": "ERROR","submitedDateTime": "Monday, 01 January 2020 01:01:01","message": "test"}', null);
        Test.setMock(HttpCalloutMock.class, fakeResponse);
        SecAPIReleaseScanController.runSecAPIStatusCheck('abc',releaseRec.Id);
        System.assertEquals('Completed',[select id,SEC_API_Scan_Status__c from copado__Release__c where id =:releaseRec.id].sec_api_scan_status__c);
        System.assertEquals(1,[select id from sec_api_scan_result__c].size());
        

        Test.stopTest();
    }
    @isTest static void testRunSecAPIStatusCheckFail(){
       copado__Project__c pro = [select id,app_Id__c from copado__Project__c where name='MY JIRA Project' limit 1];
        Sec_Api_Scan_Result__c srItem = [Select id, copado_user_story__c from Sec_Api_Scan_Result__c];
        copado__Release__c releaseRec =[Select id From copado__Release__c Limit 1];
        Test.startTest();
        
        SecApiMockHttpResponseGenerator fakeresponse = new SecApiMockHttpResponseGenerator(400, 'Complete', '{}', null);
        Test.setMock(HttpCalloutMock.class, fakeResponse);
        SecAPIReleaseScanController.runSecAPIStatusCheck('abc',releaseRec.Id);
        System.assertEquals('Completed',[select id,SEC_API_Scan_Status__c from copado__Release__c where id =:releaseRec.id].sec_api_scan_status__c);
        System.assertEquals(1,[select id from sec_api_scan_result__c].size());
        

        Test.stopTest();
    }
     @isTest static void testGetSECAPIScoreCard(){
        copado__Project__c pro = [select id,app_Id__c from copado__Project__c where name='MY JIRA Project' limit 1];
        copado__Release__c releaseRec =[Select id From copado__Release__c Limit 1];
        Sec_Api_Scan_Result__c srItem = [Select id, copado_user_story__c from Sec_Api_Scan_Result__c];
        Test.startTest();
        SecApiMockHttpResponseGenerator fakeresponse = new SecApiMockHttpResponseGenerator(200, 'Complete', '{"medium":"0","high":"0","low":"0","critical":"0","reqId":"0","scanType":"0","lastUpdated":"Monday, 01 January 2020 01:01:01","failScan":false}', null);
        Test.setMock(HttpCalloutMock.class, fakeResponse);
        SecAPIReleaseScanController.getSECAPIScoreCard('test',releaseRec.id);
        System.assertEquals('Completed',[select id,SEC_API_Scan_Status__c from copado__Release__c where id =:releaseRec.id].sec_api_scan_status__c);
        System.assertEquals(1,[select id from sec_api_scan_result__c].size());

        Test.stopTest();
    }
    
    @isTest static void testLockRelease(){
        copado__Release__c releaseRec =[Select id From copado__Release__c Limit 1];
        
        Test.startTest();
        SecAPIReleaseScanController.lockReleaseRec(releaseRec.id);
        System.assertEquals(True,[select id,Locked__c from copado__Release__c where id =:releaseRec.id].Locked__c);

        Test.stopTest();
    }
}
